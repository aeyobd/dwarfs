### A Pluto.jl notebook ###
# v0.20.4

using Markdown
using InteractiveUtils

# ╔═╡ fa54e7aa-f477-45db-8dd9-56bd6b367604
begin
	import Pkg; Pkg.activate()

	using CairoMakie
	using Arya
end

# ╔═╡ 51d52048-cd18-41ff-ac2b-41dfc097de16
using DataFrames

# ╔═╡ aae83e18-e739-4421-a763-37590cb7869a
using PairPlots

# ╔═╡ d0112dc0-8cc1-4fdf-b30d-a3b89660d9b4
begin
	using Measurements

	import LinearAlgebra: diag
	import NaNMath as nm

end

# ╔═╡ 60763b01-9c7b-4153-9b94-617820517927
using Optimization, OptimizationOptimJL

# ╔═╡ 37ee41d1-7b98-44f7-82ec-5b496622931b
using Turing

# ╔═╡ 27bd8a46-ee56-11ef-22e4-afe88d73af2d
md"""
The goal of this notebook is to fit the density profiles to e.g. King, Sersic, Exponential and save the best fit parameters for any dwarf + density profile combination.
"""

# ╔═╡ 25c3b74f-d8fa-4f4c-ae7c-71b137fb2ce7
galaxyname = "ursa_minor"

# ╔═╡ 20b8c05c-91a6-4dc2-9558-1b02be4983f2
begin
	using LilGuys
	FIGDIR = joinpath(galaxyname, "figures")
	FIGSUFFIX=".fit_density_profs"
end

# ╔═╡ 1238d232-a2c0-44e5-936b-62fd9137d552
profilename = "jax_2c"

# ╔═╡ bd933a63-45e8-4e6c-9a0a-5d20c7d55eaf
md"""
# Setup
"""

# ╔═╡ 20e017f2-c90b-46a5-a6f1-8e4aeb5ffde8
begin
	prof = LilGuys.StellarProfile(joinpath(galaxyname, "density_profiles/$(profilename)_profile.toml"))
	if prof.normalization == "mass"
		prof.log_Sigma .+= log10(sum(prof.counts))
		prof.normalization = "none"
	end

	prof
end

# ╔═╡ 30154472-316b-4489-b1e5-f503447928cb


# ╔═╡ 8d90dd5c-350a-45e6-b04c-9b2f85cf700b
function objective_function(x, u, analytic_profile, names)
	dlogx = u[1]
	dlogy = u[2]
	kwargs = [Symbol.(sym) => ui for (sym, ui) in zip(names, u[3:end])]
	
	h = analytic_profile(; M=1,  kwargs...)
	
	y_m = nm.log10.(LilGuys.calc_Σ.(h, 10 .^ (x .- dlogx))) .+ dlogy
	return y_m
end

# ╔═╡ 7ff0bee2-3622-4573-81d5-8b8fa96cf461
function fit_profile(prof, analytic_profile, names, p0; kwargs...)
	
	objective(x, u) = objective_function(x, u, analytic_profile, names)

	w = 1 ./prof.log_Sigma_err .^ 2

	local popt, covt, errs
	try
		popt, covt = LilGuys.curve_fit(objective, prof.log_r, prof.log_Sigma, w,  p0, )

	catch e
		@warn e
		popt = fill(NaN, length(names) + 2)
		errs = fill(NaN, length(names) + 2)
	else
		errs = sqrt.(diag(covt))
	end

	y_m = objective(prof.log_r, popt)
	res = y_m .- prof.log_Sigma
	chi2 = sum((res) .^ 2 .* w) ./ (length(w) - length(popt))


	result = OrderedDict()

	names_all = ["log_r_s"; "log_Sigma"; names]

	for (i, name) in enumerate(names_all)
		result[name] = popt[i]
		result[name * "_err"] = errs[i]
	end

	result["chi2"] = chi2
	result["popt"] = popt
	result["residuals"] = res
	result["log_Sigma_pred"] = y_m

	x_m = LinRange(-0.1 + minimum(prof.log_r), 0.1 + maximum(prof.log_r), 1000)
	y_m = objective(x_m, popt)
	result["log_Sigma_pred"] = y_m
	result["log_r_pred"] = x_m

	result["r_s"] = 10 .^ result["log_r_s"]
	result["r_s_err"] =  result["log_r_s_err"] * log(10) * result["r_s"]

	if analytic_profile <: LilGuys.Sersic
		result["Mtot"] = LilGuys.calc_M_2D(LilGuys.Sersic(), 1000) * 10 .^ (result["log_Sigma"] + 2result["log_r_s"])
	else
		
		kwargs = [Symbol.(sym) => ui for (sym, ui) in zip(names, popt[3:end])]
		h = analytic_profile(; M=1, kwargs...)	
	
		result["Mtot"] = LilGuys.get_M_tot(h) * 10 .^ (result["log_Sigma"]  + 2result["log_r_s"])
	end

	result["log_Mtot"] = log10.(result["Mtot"])
	result["log_Mtot_err"] = result["log_Sigma_err"] .+ 2result["log_r_s_err"]
	

	return result
end

# ╔═╡ bc6db386-7ee6-4a9f-bd06-7e306d66e74e
prof.counts

# ╔═╡ b4995591-9c7b-43ba-9a7c-a9550476c64b
LilGuys.calc_M_2D(LilGuys.Sersic(), 1000)

# ╔═╡ 11b84ff0-7f35-4716-ae30-e05a1c5f88ba
log_r_label = L"\log\, r\ /\ \mathrm{arcmin}"

# ╔═╡ 3eb9992d-425d-4bec-94d2-da4f8dc59a8d
log_sigma_label = L"$\log\, \Sigma $ /\ stars\ arcmin$^{-2}$"

# ╔═╡ 7a274a8d-f6eb-4d9b-97c5-0372dc9520fe
function plot_Σ_fit_res(obs, fit; res_max=1, nf=2, title="")
    fig = Figure()
    ax = Axis(fig[1, 1], 
        ylabel=log_sigma_label, 
		title=title,
	)
	
    errscatter!(ax, obs.log_r, obs.log_Sigma, yerr=obs.log_Sigma_err)

	log_r = fit["log_r_pred"]
	pred = fit["log_Sigma_pred"]

    lines!(ax, log_r, pred, color=COLORS[2])
	
    lines!(ax, log_r, pred, color=COLORS[2], linestyle=:dash)
    
    ax2 = Axis(fig[2, 1],
        ylabel=L"\delta\log\Sigma", 
    	xlabel=log_r_label,
		limits = (nothing, (-res_max, res_max))
	)


	res = fit["residuals"]
    errscatter!(ax2, obs.log_r, res, yerr=obs.log_Sigma_err, label="")

    hlines!(0, color=:black)
    
    rowsize!(fig.layout, 2, Relative(1/4))

    linkxaxes!(ax, ax2)
    hidexdecorations!(ax, grid=false)
    return fig
end

# ╔═╡ db8a3705-f4ea-4588-9885-0e03cd42c47b
if !isdir(FIGDIR)
	mkdir(FIGDIR)
end

# ╔═╡ 99315b4c-37c1-4287-bd71-c3339c8e76ad
import FillArrays: I, Eye

# ╔═╡ c3d9c4f3-6891-46e1-822e-5c217450f59b
import LinearAlgebra: diagm, identity

# ╔═╡ 1db8b0ed-233c-4006-a054-90abec2ab710
LilGuys.Sersic(n=1, _b_n=1, R_h=5)

# ╔═╡ 566f2f87-a840-416e-b71e-bcfbb747e39b
function plot_chains(samples)
	fig = Figure()

	Nc = size(samples, 3)

	labels = samples.info[:varname_to_symbol]

	for (i, label) in enumerate(labels)
		ax = Axis(fig[i, 1],
			xlabel = "step",
			ylabel = last(label) |> string
		)
		
		for chain in 1:Nc
			x = samples.value[:, i, chain]
			lines!(x)
		end

		if i < length(labels)
			hidexdecorations!(ax, ticks=false, grid=false, minorticks=false)
		end
	end

	linkxaxes!(fig.content...)
	fig
end

# ╔═╡ 3981b6f9-7ace-4de9-b72d-10168512689c
function sample_model(turing_model, prof)
	model = turing_model(prof.log_r, prof.log_Sigma, prof.log_Sigma_err)
	
	samples = mapreduce(c -> sample(model, NUTS(), MCMCThreads(), 1000, 4), chainscat, 1:4)

	return samples
end

# ╔═╡ 4c2f7fd6-8dcc-49c2-8b8f-bfa31748e367


# ╔═╡ 56af9242-91cc-46db-b532-c127450adfeb
import Random: randperm

# ╔═╡ 071356e5-53c4-462e-8448-7e5480dbfc0e
function plot_samples!(df, log_Σ, argnames; x= LinRange(prof.log_r_bins[1], prof.log_r_bins[end], 1000), alpha=0.01,  kwargs...)
	for row in eachrow(df)
		kwargs_prof = Dict(argname => row[argname] for argname in argnames)
		y = log_Σ(x; kwargs_prof...)

		lines!(x, y, color=(:black, alpha); kwargs...)
	end
end

# ╔═╡ 69b919f7-5985-4835-950a-ab7ad998d3fd
function subsample(samples, N=300)
	df = DataFrame(samples)
	Ntot = size(df, 1)
	if N > Ntot
		@error "more draws requested than samples"
	end

	idx = randperm(Ntot)[1:N]
	return df[idx, :]
end

# ╔═╡ e31c35b1-9b37-4c95-8344-6177b685d5ab
function plot_samples_obs(samples, log_Σ, argnames)
	fig = Figure()
	ax = Axis(fig[1,1],
		xlabel = log_r_label, 
		ylabel = log_sigma_label,
	)

	
	plot_samples!(samples, log_Σ, argnames)
	errscatter!(prof.log_r, prof.log_Sigma, yerr=prof.log_Sigma_err, color=COLORS[2])

	LilGuys.hide_grid!(ax)

	median =
	fig
end

# ╔═╡ 6cfaa5d7-988e-434b-82bc-ba88b2bc1d58


# ╔═╡ 7115482e-0cc9-40ef-b63e-0ebad62bb949
md"""
# Fits
"""

# ╔═╡ a9e5aa14-6a11-436c-97ca-7afd5fd35478
md"""
## Sérsic
"""

# ╔═╡ a4d8323a-c668-452b-a958-17982177cac6
function sersic_log_Σ(log_r; log_M_s, log_R_h, n)
	r = 10 .^ log_r
	prof = LilGuys.Sersic(n=n, R_h=10 .^ log_R_h, _b_n=LilGuys.guess_b_n(n))
	Σ = LilGuys.calc_Σ.(prof, r)
	y = @. log10(Σ)  .+ log_M_s

	return y
end

# ╔═╡ 2a3adaf5-2a0d-4674-a160-a7844b7f1463
@model function sersic_model(log_r, log_Σ, log_Σ_err)
	n ~ Gamma(1)
	log_R_h ~ Normal(0.0, 1.0)
	log_M_s ~ Normal(4.0, 2.0)

	log_σ ~ Normal(-1, 1)
	
	σ = 10 .^ log_σ
	y_pred = sersic_log_Σ(log_r; log_M_s=log_M_s, log_R_h=log_R_h, n=n)
	
	log_Σ ~ MvNormal(y_pred, diagm(log_Σ_err.^2) + Eye(length(log_Σ)) * σ .^2)
end

# ╔═╡ d8642e10-4a42-4452-b655-111b349d51ee
model = sersic_model(prof.log_r, prof.log_Sigma, prof.log_Sigma_err)

# ╔═╡ dd327a8e-a83d-4423-b507-54033c7934c4
samples_sersic = sample_model(sersic_model, prof)

# ╔═╡ 8e38da2e-ab78-4d75-a2e1-962e8004ade5
samples_sersic.info[:varname_to_symbol]

# ╔═╡ 30a3d470-a187-4ec8-a8d4-e86c921f5da3
median.(DataFrame(samples_sersic))

# ╔═╡ 537cdd66-bec2-488a-967d-893bee2e95b9
names(samples_sersic)

# ╔═╡ 23c894b7-6739-4c6c-a830-6f83951351db
df_summary = Turing.summarize(samples_sersic)

# ╔═╡ efad6b83-73a5-4aea-944b-ddc1942ac71a
plot_chains(samples_sersic)

# ╔═╡ ebc0cbc2-d9f3-4cab-a3ee-6a21763f4d20
pairplot(samples_sersic)

# ╔═╡ 572083ca-534b-4830-ac54-f9d5c9083b53
let
	fig = Figure()
	ax = Axis(fig[1,1],
		xlabel = log_r_label, 
		ylabel = log_sigma_label,
	)


	argnames = [:n, :log_M_s, :log_R_h]

	df = subsample(samples_sersic)
	plot_samples!(df, sersic_log_Σ, argnames)
	errscatter!(prof.log_r, prof.log_Sigma, yerr=prof.log_Sigma_err, color=COLORS[2])

	LilGuys.hide_grid!(ax)
	hidexdecorations!(ax, grid=false, ticks=false, minorticks=false)

	ax_res = Axis(fig[2,1],
		xlabel = log_r_label, 
		ylabel = log_sigma_label,
	)
	y_preds = [sersic_log_Σ(prof.log_r, log_M_s=row.log_M_s, log_R_h = row.log_R_h, n=row.n) for row in eachrow(df)]

	y_preds = hcat(y_preds...)
	y_m = median.(eachrow(y_preds))
	y_e = std.(eachrow(y_preds))


	errscatter!(prof.log_r, prof.log_Sigma .- y_m, yerr=prof.log_Sigma_err, color=COLORS[2])
	errscatter!(prof.log_r, zeros(length(y_m)), yerr=y_e, color=:black)
	
	rowsize!(fig.layout, 2, Relative(0.3))
	fig
end

# ╔═╡ 6d7a1522-e61e-4440-a2ff-64e625b15906
let 
	global sersic_fit
	
	analytic_profile = LilGuys.Sersic
	names = ["n"]
	
	sersic_fit = fit_profile(prof, analytic_profile, names, [0.5, -0.0, 1.0])

	fig = plot_Σ_fit_res(prof, sersic_fit, title="Sérsic", nf=length(names)+2)

	@savefig "sersic"

	fig
end

# ╔═╡ 5a54ce11-92b3-455d-a3b3-b147618585ae
md"""
## Exp2D
"""

# ╔═╡ cdc4390f-1efb-4550-b325-5c743890a5c6
function exp2d_log_Σ(log_r; log_M, log_R_s)
	r = 10 .^ log_r
	prof = LilGuys.Exp2D(
		R_s=10 .^ log_R_s, 
		M = 10 .^ log_M
	)
	
	Σ = LilGuys.calc_Σ.(prof, r)
	y = @. log10(Σ)

	return y
end

# ╔═╡ 7f367da6-4b49-4e74-9a93-d9fdf517b2bd
@model function exp2d_model(log_r, log_Σ, log_Σ_err)
	log_R_s ~ Normal(0.0, 1.0)
	log_M ~ Normal(4.0, 2.0)

	log_σ ~ Normal(-1, 1)
	
	σ = 10 .^ log_σ
	y_pred = exp2d_log_Σ(log_r; log_M=log_M, log_R_s=log_R_s)
	
	log_Σ ~ MvNormal(y_pred, diagm(log_Σ_err.^2) + Eye(length(log_Σ)) * σ .^2)
end

# ╔═╡ faaae64f-ef85-44df-b62d-e6617d02c5b6
# ╠═╡ disabled = true
#=╠═╡
samples_exp2d = sample_model(exp2d_model, prof)
  ╠═╡ =#

# ╔═╡ 900f0f00-ecff-426a-afa3-d7a20e00cd7d
fit_profile(prof, LilGuys.Exp2D, [], [0.0, 0.0])

# ╔═╡ 28600532-3a7e-491c-8113-e8253a8108c9
#=╠═╡
pairplot(samples_exp2d)
  ╠═╡ =#

# ╔═╡ bde4f544-7b5b-4224-9ce3-090fa7fe8311
md"""
## Plummer
"""

# ╔═╡ fbd8d5b6-3d48-4525-b99d-483c946cc6a3
function log_Σ_plummer(log_r; log_M, log_R_s)
	r = 10 .^ log_r
	prof = LilGuys.Plummer(
		r_s=10 .^ log_R_s, 
		M = 10 .^ log_M
	)
	
	Σ = LilGuys.calc_Σ.(prof, r)
	y = @. log10(Σ)

	return y
end

# ╔═╡ 81e50d1f-609b-46f5-b9e2-873dfeba1b45
@model function model_plummer(log_r, log_Σ, log_Σ_err)
	log_R_s ~ Normal(0.0, 1.0)
	log_M ~ Normal(4.0, 2.0)

	log_σ ~ Normal(-1, 1)
	
	σ = 10 .^ log_σ
	y_pred = log_Σ_plummer(log_r; log_M=log_M, log_R_s=log_R_s)
	
	log_Σ ~ MvNormal(y_pred, diagm(log_Σ_err.^2) + Eye(length(log_Σ)) * σ .^2)
end

# ╔═╡ ad16e44b-4f56-4ff5-a85e-f619cbf0c24f
samples_plummer= sample_model(model_plummer, prof)

# ╔═╡ de7eb968-6616-491e-b258-d3f8be1134e8
md"""
# Old Fits
"""

# ╔═╡ 76326a80-b709-4f96-a379-8aaea4d3af44
let 
	global exp_fit
	analytic_profile = LilGuys.Exp2D
	names = []
	
	exp_fit  = fit_profile(prof, analytic_profile, names, [0.0, 0.0])

	fig = plot_Σ_fit_res(prof, exp_fit, title="Exp2D")

	@savefig "exp2d"

	fig
end

# ╔═╡ 9840c373-dbf2-4d26-85b5-15ecbbb2c657
let 
	global king_fit

	
	analytic_profile = LilGuys.KingProfile
	names = ["c"]
	
	fit = fit_profile(prof, analytic_profile, names, [2.0, 2.0, 3.0])

	fig = plot_Σ_fit_res(prof, fit, title="King")

	king_fit = fit
	@savefig "king"

	fig
end

# ╔═╡ 88352faf-ce2a-4bd8-80bf-268d77601698
let 
	global plummer_fit
	
	analytic_profile = LilGuys.Plummer
	names = []
	
	fit = fit_profile(prof, analytic_profile, names, [1.0, 0.0])

	fig = plot_Σ_fit_res(prof, fit, title="Plummer")

	@savefig "plummer"

	plummer_fit = fit
	fig
end

# ╔═╡ 03712608-6f01-482f-9971-687712de6a06
sersic_fit

# ╔═╡ 6f101561-2262-4012-9e17-aae2bd873d95


# ╔═╡ a406d50a-468e-4b8a-ac0d-2bc4ea8e4251
begin
	derived_props = OrderedDict()
	derived_props["r_h"] = sersic_fit["r_s"]
	derived_props["r_h_err"] =  sersic_fit["r_s_err"]

	derived_props["chi2_sersic"] = sersic_fit["chi2"]
	derived_props["M_sersic"] = sersic_fit["Mtot"]
	derived_props["M_sersic_err"] = sersic_fit["Mtot_err"]

	derived_props["n_sersic"] = sersic_fit["n"]
	derived_props["n_sersic_err"] = sersic_fit["n_err"]

	derived_props["r_s_exp"] = exp_fit["r_s"]
	derived_props["r_s_exp_err"] =  exp_fit["r_s_err"]
	derived_props["chi2_exp"] = exp_fit["chi2"]
	derived_props["M_exp"] = exp_fit["Mtot"]
	derived_props["M_exp_err"] = exp_fit["Mtot_err"]

	if isdefined(@__MODULE__, :king_fit)
		derived_props["r_s_king"] = king_fit["r_s"]
		derived_props["r_s_king_err"] =  king_fit["r_s_err"]
		derived_props["c_king"] = king_fit["c"]
		derived_props["c_king_err"] =  king_fit["c_err"]
		derived_props["chi2_king"] = king_fit["c_err"]
		derived_props["M_king"] = king_fit["Mtot"]
		derived_props["M_king_err"] = king_fit["Mtot_err"]
	end

	derived_props
end

# ╔═╡ 84fe5bae-c470-4df8-86fa-51cdf4300f01
import TOML

# ╔═╡ 456d26b3-6ec0-4fdc-95cc-78d35cc2e7ca
open(joinpath(galaxyname, "profile_fits.toml"), "w") do f
	TOML.print(f, derived_props)
end

# ╔═╡ Cell order:
# ╟─27bd8a46-ee56-11ef-22e4-afe88d73af2d
# ╠═25c3b74f-d8fa-4f4c-ae7c-71b137fb2ce7
# ╠═1238d232-a2c0-44e5-936b-62fd9137d552
# ╟─bd933a63-45e8-4e6c-9a0a-5d20c7d55eaf
# ╠═fa54e7aa-f477-45db-8dd9-56bd6b367604
# ╠═51d52048-cd18-41ff-ac2b-41dfc097de16
# ╠═aae83e18-e739-4421-a763-37590cb7869a
# ╠═20b8c05c-91a6-4dc2-9558-1b02be4983f2
# ╠═d0112dc0-8cc1-4fdf-b30d-a3b89660d9b4
# ╠═20e017f2-c90b-46a5-a6f1-8e4aeb5ffde8
# ╠═60763b01-9c7b-4153-9b94-617820517927
# ╠═37ee41d1-7b98-44f7-82ec-5b496622931b
# ╠═30154472-316b-4489-b1e5-f503447928cb
# ╠═8d90dd5c-350a-45e6-b04c-9b2f85cf700b
# ╠═7ff0bee2-3622-4573-81d5-8b8fa96cf461
# ╠═bc6db386-7ee6-4a9f-bd06-7e306d66e74e
# ╠═7a274a8d-f6eb-4d9b-97c5-0372dc9520fe
# ╠═b4995591-9c7b-43ba-9a7c-a9550476c64b
# ╠═11b84ff0-7f35-4716-ae30-e05a1c5f88ba
# ╠═3eb9992d-425d-4bec-94d2-da4f8dc59a8d
# ╠═db8a3705-f4ea-4588-9885-0e03cd42c47b
# ╠═99315b4c-37c1-4287-bd71-c3339c8e76ad
# ╠═c3d9c4f3-6891-46e1-822e-5c217450f59b
# ╠═1db8b0ed-233c-4006-a054-90abec2ab710
# ╠═566f2f87-a840-416e-b71e-bcfbb747e39b
# ╠═8e38da2e-ab78-4d75-a2e1-962e8004ade5
# ╠═d8642e10-4a42-4452-b655-111b349d51ee
# ╠═3981b6f9-7ace-4de9-b72d-10168512689c
# ╠═4c2f7fd6-8dcc-49c2-8b8f-bfa31748e367
# ╠═56af9242-91cc-46db-b532-c127450adfeb
# ╠═071356e5-53c4-462e-8448-7e5480dbfc0e
# ╠═69b919f7-5985-4835-950a-ab7ad998d3fd
# ╠═e31c35b1-9b37-4c95-8344-6177b685d5ab
# ╠═6cfaa5d7-988e-434b-82bc-ba88b2bc1d58
# ╠═30a3d470-a187-4ec8-a8d4-e86c921f5da3
# ╠═537cdd66-bec2-488a-967d-893bee2e95b9
# ╟─7115482e-0cc9-40ef-b63e-0ebad62bb949
# ╠═a9e5aa14-6a11-436c-97ca-7afd5fd35478
# ╠═a4d8323a-c668-452b-a958-17982177cac6
# ╠═2a3adaf5-2a0d-4674-a160-a7844b7f1463
# ╠═dd327a8e-a83d-4423-b507-54033c7934c4
# ╠═23c894b7-6739-4c6c-a830-6f83951351db
# ╠═efad6b83-73a5-4aea-944b-ddc1942ac71a
# ╠═ebc0cbc2-d9f3-4cab-a3ee-6a21763f4d20
# ╠═572083ca-534b-4830-ac54-f9d5c9083b53
# ╠═6d7a1522-e61e-4440-a2ff-64e625b15906
# ╟─5a54ce11-92b3-455d-a3b3-b147618585ae
# ╠═cdc4390f-1efb-4550-b325-5c743890a5c6
# ╠═7f367da6-4b49-4e74-9a93-d9fdf517b2bd
# ╠═faaae64f-ef85-44df-b62d-e6617d02c5b6
# ╠═900f0f00-ecff-426a-afa3-d7a20e00cd7d
# ╠═28600532-3a7e-491c-8113-e8253a8108c9
# ╠═bde4f544-7b5b-4224-9ce3-090fa7fe8311
# ╠═fbd8d5b6-3d48-4525-b99d-483c946cc6a3
# ╠═81e50d1f-609b-46f5-b9e2-873dfeba1b45
# ╠═ad16e44b-4f56-4ff5-a85e-f619cbf0c24f
# ╟─de7eb968-6616-491e-b258-d3f8be1134e8
# ╠═76326a80-b709-4f96-a379-8aaea4d3af44
# ╠═9840c373-dbf2-4d26-85b5-15ecbbb2c657
# ╠═88352faf-ce2a-4bd8-80bf-268d77601698
# ╠═03712608-6f01-482f-9971-687712de6a06
# ╠═6f101561-2262-4012-9e17-aae2bd873d95
# ╠═a406d50a-468e-4b8a-ac0d-2bc4ea8e4251
# ╠═84fe5bae-c470-4df8-86fa-51cdf4300f01
# ╠═456d26b3-6ec0-4fdc-95cc-78d35cc2e7ca
